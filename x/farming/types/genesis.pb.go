// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/farming/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the farming module's genesis state.
type GenesisState struct {
	// params defines all the parameters for the farming module
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// plan_records defines the plan records used for genesis state
	PlanRecords []PlanRecord `protobuf:"bytes,2,rep,name=plan_records,json=planRecords,proto3" json:"plan_records" yaml:"plan_records"`
	// stakings defines the staking records used for genesis state
	Stakings []Staking `protobuf:"bytes,3,rep,name=stakings,proto3" json:"stakings"`
	// rewards defines the reward records used for genesis state
	Rewards []Reward `protobuf:"bytes,4,rep,name=rewards,proto3" json:"rewards"`
	// staking_reserve_coins specifies balance of the staking reserve pool staked in the plans
	// this param is needed for import/export validation
	StakingReserveCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=staking_reserve_coins,json=stakingReserveCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"staking_reserve_coins" yaml:"staking_reserve_coins"`
	// reward_pool_coins specifies balance of the reward pool to be distributed in the plans
	// this param is needed for import/export validation
	RewardPoolCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=reward_pool_coins,json=rewardPoolCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_pool_coins" yaml:"reward_pool_coins"`
	// global_last_epoch_time specifies the last executed epoch time of the plans
	GlobalLastEpochTime time.Time `protobuf:"bytes,7,opt,name=global_last_epoch_time,json=globalLastEpochTime,proto3,stdtime" json:"global_last_epoch_time" yaml:"global_last_epoch_time"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c67612b66bcd2967, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

// PlanRecord is used for import/export via genesis json.
type PlanRecord struct {
	// plan specifies the plan interface; it can be FixedAmountPlan or RatioPlan
	Plan types1.Any `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan"`
	// farming_pool_coins specifies balance of the farming pool for the plan
	// this param is needed for import/export validation
	FarmingPoolCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=farming_pool_coins,json=farmingPoolCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"farming_pool_coins" yaml:"farming_pool_coins"`
}

func (m *PlanRecord) Reset()         { *m = PlanRecord{} }
func (m *PlanRecord) String() string { return proto.CompactTextString(m) }
func (*PlanRecord) ProtoMessage()    {}
func (*PlanRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_c67612b66bcd2967, []int{1}
}
func (m *PlanRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlanRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlanRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlanRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanRecord.Merge(m, src)
}
func (m *PlanRecord) XXX_Size() int {
	return m.Size()
}
func (m *PlanRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PlanRecord proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "cosmos.farming.v1beta1.GenesisState")
	proto.RegisterType((*PlanRecord)(nil), "cosmos.farming.v1beta1.PlanRecord")
}

func init() {
	proto.RegisterFile("tendermint/farming/v1beta1/genesis.proto", fileDescriptor_c67612b66bcd2967)
}

var fileDescriptor_c67612b66bcd2967 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x31, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0x7d, 0x6d, 0x9a, 0x56, 0x97, 0x4a, 0xff, 0x3f, 0x4e, 0xa9, 0x9c, 0x00, 0x76, 0xe5,
	0x29, 0x0c, 0xb5, 0xd5, 0xb2, 0x55, 0x08, 0xa9, 0x41, 0x88, 0x81, 0x22, 0x45, 0x2e, 0x13, 0x8b,
	0x75, 0x4e, 0xae, 0xae, 0x55, 0xdb, 0x67, 0xf9, 0xae, 0x85, 0xf0, 0x09, 0x18, 0x2b, 0x21, 0xb1,
	0xd2, 0x11, 0xf1, 0x49, 0x3a, 0x76, 0x64, 0x6a, 0x50, 0xb2, 0xb0, 0xc2, 0x27, 0x40, 0xbe, 0x7b,
	0xed, 0x46, 0x24, 0xa1, 0xea, 0xe4, 0x8b, 0xdf, 0xe7, 0xfd, 0xf9, 0x79, 0xdf, 0x7b, 0x14, 0xdc,
	0x11, 0x34, 0x1d, 0xd0, 0x3c, 0x89, 0x52, 0xe1, 0x1e, 0x91, 0xe2, 0x19, 0xba, 0x67, 0x3b, 0x01,
	0x15, 0x64, 0xc7, 0x0d, 0x69, 0x4a, 0x79, 0xc4, 0x9d, 0x2c, 0x67, 0x82, 0xe9, 0x9b, 0x7d, 0xc6,
	0x13, 0xc6, 0x1d, 0x50, 0x39, 0xa0, 0x6a, 0xb7, 0x42, 0xc6, 0xc2, 0x98, 0xba, 0x52, 0x15, 0x9c,
	0x1e, 0xb9, 0x24, 0x1d, 0xaa, 0x96, 0xf6, 0x46, 0xc8, 0x42, 0x26, 0x8f, 0x6e, 0x71, 0x82, 0xb7,
	0x2d, 0x05, 0xf2, 0x55, 0x01, 0xa8, 0xaa, 0x64, 0xaa, 0x5f, 0x6e, 0x40, 0x38, 0xad, 0x6c, 0xf4,
	0x59, 0x94, 0x42, 0xfd, 0x5f, 0x6e, 0x4b, 0x5f, 0x4a, 0x69, 0xfd, 0xed, 0x4a, 0x44, 0x09, 0xe5,
	0x82, 0x24, 0x99, 0x12, 0xd8, 0xbf, 0x56, 0xf0, 0xfa, 0x4b, 0x35, 0xe0, 0xa1, 0x20, 0x82, 0xea,
	0x4f, 0x71, 0x3d, 0x23, 0x39, 0x49, 0xb8, 0x81, 0xb6, 0x50, 0xa7, 0xb1, 0x6b, 0x3a, 0xf3, 0x07,
	0x76, 0x7a, 0x52, 0xd5, 0xad, 0x5d, 0x5e, 0x5b, 0x9a, 0x07, 0x3d, 0x7a, 0x80, 0xd7, 0xb3, 0x98,
	0xa4, 0x7e, 0x4e, 0xfb, 0x2c, 0x1f, 0x70, 0x63, 0x69, 0x6b, 0xb9, 0xd3, 0xd8, 0xb5, 0x17, 0x32,
	0x62, 0x92, 0x7a, 0x52, 0xda, 0x7d, 0x50, 0x70, 0x7e, 0x5f, 0x5b, 0xcd, 0x21, 0x49, 0xe2, 0x3d,
	0x7b, 0x9a, 0x62, 0x7b, 0x8d, 0xac, 0x12, 0x72, 0x7d, 0x1f, 0xaf, 0x71, 0x41, 0x4e, 0xa2, 0x34,
	0xe4, 0xc6, 0xb2, 0xe4, 0x5b, 0x8b, 0xf8, 0x87, 0x4a, 0x07, 0x26, 0xab, 0x36, 0xfd, 0x19, 0x5e,
	0xcd, 0xe9, 0x3b, 0x52, 0x38, 0xac, 0x49, 0xc2, 0xc2, 0x29, 0x3d, 0x29, 0x03, 0x40, 0xd9, 0xa4,
	0x7f, 0x41, 0xf8, 0x3e, 0xc0, 0xfc, 0x9c, 0x72, 0x9a, 0x9f, 0x51, 0xbf, 0xb8, 0x1f, 0x6e, 0xac,
	0x48, 0x5c, 0xab, 0xc4, 0x15, 0x37, 0x58, 0xb1, 0x9e, 0xb3, 0x28, 0xed, 0xf6, 0x60, 0xce, 0x87,
	0x6a, 0xce, 0xb9, 0x14, 0xfb, 0xdb, 0xc8, 0xea, 0x84, 0x91, 0x38, 0x3e, 0x0d, 0x9c, 0x3e, 0x4b,
	0x20, 0x1c, 0xf0, 0xd8, 0xe6, 0x83, 0x13, 0x57, 0x0c, 0x33, 0xca, 0x25, 0x90, 0x7b, 0x4d, 0x60,
	0x78, 0x0a, 0x21, 0x5f, 0xea, 0x9f, 0x10, 0xbe, 0xa7, 0xdc, 0xfa, 0x19, 0x63, 0x31, 0xb8, 0xab,
	0xdf, 0xe6, 0xee, 0x00, 0xdc, 0x19, 0xca, 0xdd, 0x0c, 0xe1, 0x6e, 0xce, 0xfe, 0x53, 0xfd, 0x3d,
	0xc6, 0x62, 0xe5, 0xea, 0x03, 0xde, 0x0c, 0x63, 0x16, 0x90, 0xd8, 0x8f, 0x09, 0x17, 0x3e, 0xcd,
	0x58, 0xff, 0xd8, 0x2f, 0x22, 0x69, 0xac, 0xca, 0xb0, 0xb5, 0x1d, 0x95, 0x57, 0xa7, 0xcc, 0xab,
	0xf3, 0xa6, 0xcc, 0x6b, 0xf7, 0x31, 0x58, 0x7b, 0xa4, 0xac, 0xcd, 0xe7, 0xd8, 0xe7, 0x23, 0x0b,
	0x79, 0x4d, 0x55, 0x3c, 0x20, 0x5c, 0xbc, 0x28, 0x4a, 0x05, 0x64, 0x6f, 0xed, 0xe3, 0x85, 0xa5,
	0xfd, 0xbc, 0xb0, 0x34, 0x7b, 0x84, 0x30, 0xbe, 0x49, 0x9e, 0xee, 0xe0, 0x5a, 0x11, 0x2f, 0xc8,
	0xfb, 0xc6, 0x8c, 0x85, 0xfd, 0x74, 0x08, 0xf7, 0x2f, 0x75, 0xfa, 0x67, 0x84, 0x75, 0x88, 0xc9,
	0xf4, 0x6e, 0x97, 0x6e, 0xdb, 0xed, 0x6b, 0x18, 0xa0, 0xa5, 0x06, 0x98, 0x45, 0xdc, 0x6d, 0xb9,
	0xff, 0x03, 0xa0, 0xda, 0xee, 0xcd, 0x84, 0xdd, 0x57, 0x5f, 0xc7, 0x26, 0xba, 0x1c, 0x9b, 0xe8,
	0x6a, 0x6c, 0xa2, 0x1f, 0x63, 0x13, 0x9d, 0x4f, 0x4c, 0xed, 0x6a, 0x62, 0x6a, 0xdf, 0x27, 0xa6,
	0xf6, 0x76, 0x7b, 0xea, 0x1b, 0x73, 0xfe, 0x49, 0xde, 0x57, 0x27, 0xf9, 0xb9, 0xa0, 0x2e, 0x37,
	0xf1, 0xe4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0xcb, 0x13, 0x06, 0x24, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.GlobalLastEpochTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.GlobalLastEpochTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if len(m.RewardPoolCoins) > 0 {
		for iNdEx := len(m.RewardPoolCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPoolCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.StakingReserveCoins) > 0 {
		for iNdEx := len(m.StakingReserveCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingReserveCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Stakings) > 0 {
		for iNdEx := len(m.Stakings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PlanRecords) > 0 {
		for iNdEx := len(m.PlanRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlanRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PlanRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlanRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FarmingPoolCoins) > 0 {
		for iNdEx := len(m.FarmingPoolCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingPoolCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.PlanRecords) > 0 {
		for _, e := range m.PlanRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Stakings) > 0 {
		for _, e := range m.Stakings {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StakingReserveCoins) > 0 {
		for _, e := range m.StakingReserveCoins {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardPoolCoins) > 0 {
		for _, e := range m.RewardPoolCoins {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.GlobalLastEpochTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PlanRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Plan.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.FarmingPoolCoins) > 0 {
		for _, e := range m.FarmingPoolCoins {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanRecords = append(m.PlanRecords, PlanRecord{})
			if err := m.PlanRecords[len(m.PlanRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakings = append(m.Stakings, Staking{})
			if err := m.Stakings[len(m.Stakings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, Reward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingReserveCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingReserveCoins = append(m.StakingReserveCoins, types.Coin{})
			if err := m.StakingReserveCoins[len(m.StakingReserveCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPoolCoins = append(m.RewardPoolCoins, types.Coin{})
			if err := m.RewardPoolCoins[len(m.RewardPoolCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalLastEpochTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.GlobalLastEpochTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlanRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolCoins = append(m.FarmingPoolCoins, types.Coin{})
			if err := m.FarmingPoolCoins[len(m.FarmingPoolCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
